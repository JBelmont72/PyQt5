'''

myCalc_2.py is the most recent version of the calculator, I am deleting the square to add an open parenthesis and deleting pi to add aclosed parenthesis.
'''
## 20 April 11 AM this is my most recent version of the calculator
# MyCalc_1.py
# This is a simple calculator application using PyQt5. I am using MyCalc_backup_1.py as the UI file generated by Qt Designer.
# It includes basic arithmetic operations and a simple user interface.  
import sys
import math
from PyQt5.QtWidgets import QMainWindow, QApplication
# from MyCalc_backup_1 import Ui_MainWindow  # assuming this file is saved as calc.py
from MyCalc_backup_1 import Ui_MyCalculator  # assuming this file is saved as calc.py

class Calculator(QMainWindow, Ui_MyCalculator):
# class Calculator(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.init_signals()

    def init_signals(self):
        self.oneButton.clicked.connect(lambda: self.input_digit("1"))
        self.twoButton.clicked.connect(lambda: self.input_digit("2"))
        self.threeButton.clicked.connect(lambda: self.input_digit("3"))
        self.fourButton.clicked.connect(lambda: self.input_digit("4"))
        self.fiveButton.clicked.connect(lambda: self.input_digit("5"))
        self.sixButton.clicked.connect(lambda: self.input_digit("6"))
        self.sevenButton.clicked.connect(lambda: self.input_digit("7"))
        self.eightButton.clicked.connect(lambda: self.input_digit("8"))
        self.nineButton.clicked.connect(lambda: self.input_digit("9"))
        self.zeroButton.clicked.connect(lambda: self.input_digit("0"))
        self.pointButton.clicked.connect(lambda: self.add_decimal())  # Decimal button
        self.PlusMinusButton.clicked.connect(self.toggle_sign)  # Plus/Minus button
        self.logButton.clicked.connect(lambda:self.input_digit("log"))  # Clear button sets display to "0"
        self.plusButton.clicked.connect(lambda: self.input_operator("+"))
        self.minusButton.clicked.connect(lambda: self.input_operator("-"))
        ## self.multiplyButton.clicked.connect(lambda: self.input_operator("*"))
        self.divideButton.clicked.connect(lambda: self.input_operator("/"))
        self.XButton.clicked.connect(lambda: self.input_operator("*"))  # Multiplication button
        # self.equalButton.clicked.connect(lambda: self.press_it('='))
        self.equalButton.clicked.connect(lambda: self.calculate_result())
        self.percentButton.clicked.connect(lambda: self.input_operator("%"))
        # self.pointButton.clicked.connect(self.add_decimal)  # Decimal button
        self.cButton.clicked.connect(lambda: self.press_it('C'))  # Clear button sets display to "0"
        # self.cButton.clicked.connect(lambda: self.input_operator("C"))  # Clear button sets display to "0"
        # self.backspaceButton.clicked.connect(self.remove_it)  # Backspace button
        # self.clearButton.clicked.connect(self.clear_display)
        # self.shiftButton.clicked.connect(self.toggle_sign)
        # self.decimalButton.clicked.connect(self.add_decimal)
        # self.pushButton_1 = QtWidgets.QPushButton(self.centralwidget,clicked = lambda:self.press_it('1')) from # MyCalc_backup_1 import Ui_MainWindow
        ## i took the pushButton_4 out of the init_signals function and added it here, it is the back space button
        # self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget,clicked = lambda:self.press_it('<<'))
        self.pushButton_4.clicked.connect(self.remove_it)  # Backspace button
        # self.C_Button.clicked.connect(self.clear_display)
        # self.shiftButton.clicked.connect(self.toggle_sign)
        self.squareButton.clicked.connect(lambda: self.input_digit("("))  # Square button repurposed to open parenthesis

        # self.squareButton.clicked.connect(lambda: self.input_operator("**2"))  # Square button
        self.squareRootButton.clicked.connect(lambda: self.input_operator("âˆš"))  # Square root button
        # self.cubeButton.clicked.connect(lambda: self.input_operator("**3"))  # Cube button
        # self.cubeRootButton.clicked.connect(lambda: self.input_operator("âˆ›"))  # Cube root button
        # self.factorialButton.clicked.connect(lambda: self.input_operator("!"))  # Factorial button
        
        
        self.piButton.clicked.connect(lambda: self.input_digit(")"))

        
        # self.piButton.clicked.connect(lambda: self.input_operator("Ï€"))  # Pi button## i repurposed this for open bracket
        # self.eButton.clicked.connect(lambda: self.input_operator("e"))  # Euler's number button
        self.sineButton.clicked.connect(lambda: self.input_operator("sin"))  # Sine button
        # self.cosButton.clicked.connect(lambda: self.input_operator("cos"))  # Cosine button
        # self.tanButton.clicked.connect(lambda: self.input_operator("tan"))  # Tangent button
        # self.asinButton.clicked.connect(lambda: self.input_operator("asin"))  # Inverse sine button
        # self.acosButton.clicked.connect(lambda: self.input_operator("acos"))  # Inverse cosine button
        # self.atanButton.clicked.connect(lambda: self.input_operator("atan"))  # Inverse tangent button
        # self.sinhButton.clicked.connect(lambda: self.input_operator("sinh"))  # Hyperbolic sine button
    
    
    
    #     def press_it(self,pressed):       ## WORKS
#         # self.ResultLabel.setText(pressed)
#         if pressed == 'C':
#             pressed='0'
#             self.ResultLabel.setText(pressed)
#         else:
#             ## Check if the last character  starts with a 0
#             if self.ResultLabel.text() == '0':## if the entire label is 0
#                 self.ResultLabel.setText(pressed) ## set the label to the pressed button
#                 # self.ResultLabel.setText(' ')
#             else:
#                 self.ResultLabel.setText(f'{self.ResultLabel.text()}{pressed}') ##   concatenate the pressed button to the label
    def input_digit(self, digit):
        current = self.ResultLabel.text()                     
        if current == "0":
            current = ""

        if digit == "log":
            self.ResultLabel.setText(current + "log(")

        ### ðŸ”§ These were added:
        elif digit == "âˆš":
            self.ResultLabel.setText(current + "sqrt(")
        elif digit == "sin":
            self.ResultLabel.setText(current + "sin(")
        elif digit == "%":
            self.ResultLabel.setText(current + "%")

        # (You can also handle '(' and ')' if needed)
        elif digit == "(":
            self.ResultLabel.setText(current + "(")
        elif digit == ")":
            if current and not current.endswith(")"):
                self.ResultLabel.setText(current + ")")

        ### ðŸ”§ Everything else goes to the fallback:
        else:
            self.ResultLabel.setText(current + digit)

    def input_operator(self, operator):
        current = self.ResultLabel.text()
        self.ResultLabel.setText(current + " " + operator + " ")       
    

    # def calculate_result(self):
    #     try:
    #         expression = self.ResultLabel.text()
    #         # Replace 'âˆš' with 'sqrt' for evaluation
    #         expression = expression.replace("âˆš", "sqrt")
    #         # Evaluate the expression
    #         result = eval(expression)
    #         self.ResultLabel.setText(str(result))
    #     except Exception as e:
    #         self.ResultLabel.setText("Error")

    def calculate_result(self):
        try:
            expression = self.ResultLabel.text()
            expression = expression.replace("âˆš", "sqrt")  # just in case
            result = eval(expression, {"__builtins__": None}, {
                "sqrt": math.sqrt,
                "log": math.log10,  # log base 10
                "sin": math.sin,
                "cos": math.cos,
                "tan": math.tan,
                "pi": math.pi,
                "e": math.e
            })
            self.ResultLabel.setText(str(result))
        except Exception as e:
            self.ResultLabel.setText("Error")



    def clear_display(self):        ## not currently using this function
        # Clear the display
        self.ResultLabel.setText("0")

    def toggle_sign(self):
        text = self.ResultLabel.text()
        if text.startswith("-"):
            self.ResultLabel.setText(text[1:])
        elif text != "0":
            self.ResultLabel.setText("-" + text)
      
    def remove_it(self):
        #remove character
        #grab what is on the screen
        #remove last character
        screen= self.ResultLabel.text()
        screen=screen[:-1]
        self.ResultLabel.setText(screen)  
    
    def add_decimal(self):
        current_text = self.ResultLabel.text()
        
        # if not current_text:    ## i can do without this line since i already set the label to 0
        #     # If the label is empty, start with '0.'
        #     # Start with '0.' if it's empty
        #     self.ResultLabel.setText("0.")
        #     return

        # Find the last operator (split point for the most recent number)
        last_operator_pos = -1
        for op in ['+', '-', '*', '/']:
            pos = current_text.rfind(op)
            if pos > last_operator_pos:
                last_operator_pos = pos

        # Get the last number being typed (after the last operator)
        last_number = current_text[last_operator_pos + 1:]

        # Only add a decimal if that last number doesn't already have one
        if '.' not in last_number:
            self.ResultLabel.setText(current_text + '.')

    
    def press_it(self,pressed):       ## WORKS
        # self.ResultLabel.setText(pressed)
        if pressed == 'C':
            pressed='0'
            self.ResultLabel.setText(pressed)
        else:
            ## Check if the last character  starts with a 0
            if self.ResultLabel.text() == '0':## if the entire label is 0
                self.ResultLabel.setText(pressed) ## set the label to the pressed button
                # self.ResultLabel.setText(' ')
            else:
                self.ResultLabel.setText(f'{self.ResultLabel.text()}{pressed}') ##   concatenate the pressed button to the label
        
        
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = Calculator()
    window.show()
    sys.exit(app.exec_())