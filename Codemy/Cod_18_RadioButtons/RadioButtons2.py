# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Codemy/Cod_18_RadioButtons/RadioButtons2.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
'''
first is from Codemy lesson 18
second is from https://www.pythontutorial.net/pyqt/pyqt-qradiobutton/ 
and uses QWidget

'''

from PyQt5.QtWidgets import QApplication, QWidget, QToolButton, QLabel, QVBoxLayout, QHBoxLayout

from PyQt5 import QtCore, QtGui, QtWidgets
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(397, 440)
        font = QtGui.QFont()
        font.setBold(True)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Pepperoni = QtWidgets.QRadioButton(self.centralwidget)
        self.Pepperoni.setGeometry(QtCore.QRect(140, 60, 121, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.Pepperoni.setFont(font)
        self.Pepperoni.setObjectName("Pepperoni")
        self.cheese = QtWidgets.QRadioButton(self.centralwidget)
        self.cheese.setGeometry(QtCore.QRect(140, 110, 121, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.cheese.setFont(font)
        self.cheese.setObjectName("cheese")
        self.mushrooms = QtWidgets.QRadioButton(self.centralwidget)
        self.mushrooms.setGeometry(QtCore.QRect(140, 160, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        self.mushrooms.setFont(font)
        self.mushrooms.setObjectName("mushrooms")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(110, 260, 271, 51))
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        font.setPointSize(16)
        font.setUnderline(True)
        self.label.setFont(font)
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 397, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
## set radioButton states
        self.Pepperoni.toggled.connect(lambda: self.btnstate(self.Pepperoni))
        self.cheese.toggled.connect(lambda:self.btnstate(self.cheese))
        self.mushrooms.toggled.connect(lambda:self.btnstate(self.mushrooms))
        self.Pepperoni.clicked.connect(self.update)
        ## if we want to set a default option
        self.Pepperoni.setChecked(True)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Pepperoni.setText(_translate("MainWindow", "pepperoni"))
        self.cheese.setText(_translate("MainWindow", "cheese"))
        self.mushrooms.setText(_translate("MainWindow", "mushrooms"))
        self.label.setText(_translate("MainWindow", "Choose Your Topping"))
    def update(self,rb):
        # get the radio button the send the signal

        print(rb) ## this returns True
        
    def btnstate(self,b):   ## we are passing in the radioButtons a 'b'
        if b.isChecked():
            if b.text()=='cheese':
                self.label.setText(f'I love {b.text()}') ## could select sending UDP messages etc just as easily
            else:
                self.label.setText(f'You have selected {b.text()}')
        
if __name__ == "__main__":
    import sys
    from PyQt5.QtWidgets import QApplication, QMainWindow
    app = QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

######~~~~~~~~
# import sys
# from PyQt5.QtWidgets import QApplication, QWidget, QRadioButton, QLabel, QVBoxLayout
# from PyQt5.QtCore import Qt


# class MainWindow(QWidget):
#     def __init__(self, *args, **kwargs):
#         super().__init__(*args, **kwargs)

#         self.setWindowTitle('PyQt QRadioButton')
#         self.setMinimumWidth(300)

#         # create a grid layout
#         layout = QVBoxLayout()
#         self.setLayout(layout)

#         label = QLabel('Please select a platform:', self)

#         rb_android = QRadioButton('Android', self)
#         rb_android.toggled.connect(self.update)

#         rb_ios = QRadioButton('iOS', self)
#         rb_ios.toggled.connect(self.update)

#         rb_windows = QRadioButton('Windows', self)
#         rb_windows.toggled.connect(self.update)

#         self.result_label = QLabel('', self)

#         layout.addWidget(label)
#         layout.addWidget(rb_android)
#         layout.addWidget(rb_ios)
#         layout.addWidget(rb_windows)
#         layout.addWidget(self.result_label)

#         # show the window
#         self.show()

#     def update(self):
#         # get the radio button the send the signal
#         rb = self.sender()
#         print(rb)

#         # check if the radio button is checked
#         if rb.isChecked():
#             self.result_label.setText(f'You selected {rb.text()}')


# if __name__ == '__main__':
#     app = QApplication(sys.argv)
#     window = MainWindow()
#     sys.exit(app.exec())
    
'''
https://stackoverflow.com/questions/13050810/pyqt-button-clicked-name
You can call self.sender() in a function connected to your button event to get the object that triggered the event. From there you can call the object's objectName() method to get the name.

Here's a quick example - the widget has 10 buttons and clicking on a button will update the label's text to show the button name.

JBelmont72: is see that self.widget_layout.addItem(self.status_label)  works fine but why does .addLayout() not work?

GitHub.copilot-chat.github.copilot.editor: The issue lies in the type of object you are trying to add to `self.widget_layout` using `.addLayout()` versus `.addItem()`.

### Key Points:
1. **`addLayout()`**:
   - This method is designed to add a **layout** (e.g., `QVBoxLayout`, `QHBoxLayout`, etc.) to another layout.
   - It expects an object of type `QLayout` or a subclass of `QLayout`.

2. **`addItem()`**:
   - This method is more generic and can add any `QLayoutItem` to the layout.
   - A `QLabel` (like `self.status_label`) is wrapped in a `QWidgetItem` internally, which is a subclass of `QLayoutItem`. This is why `addItem()` works for `QLabel`.

3. **`self.status_label`**:
   - `self.status_label` is a `QLabel`, which is a widget, not a layout. Therefore, it cannot be added using `.addLayout()` because `.addLayout()` only accepts layouts.

### Why `.addLayout()` Fails:
When you call `self.widget_layout.addLayout(self.status_label)`, the method expects a `QLayout` object but receives a `QLabel` instead. This mismatch causes the method to fail.

### Why `.addItem()` Works:
The `addItem()` method is more flexible and can handle widgets like `QLabel` because they are internally wrapped as `QWidgetItem`, which is compatible with `addItem()`.

### Correct Usage:
If you want to add `self.status_label` to `self.widget_layout`, you should use `.addWidget()` instead of `.addLayout()` or `.addItem()` for clarity and correctness:

```python
self.widget_layout.addWidget(self.status_label)
```

### Summary:
- Use `.addLayout()` for adding layouts.
- Use `.addWidget()` for adding widgets like `QLabel`.
- `.addItem()` works but is less commonly used directly for widgets, as `.addWidget()` is more explicit and readable.
You can call self.sender() in a function connected to your button event to get the object that triggered the event. From there you can call the object's objectName() method to get the name.

Here's a quick example - the widget has 10 buttons and clicking on a button will update the label's text to show the button name.


'''
# import sys
# from PyQt5.QtWidgets import QApplication, QWidget, QToolButton, QLabel, QVBoxLayout, QHBoxLayout

# class Widget(QWidget):
#     def __init__(self, parent=None):
#         QWidget.__init__(self, parent)

#         self.button_layout = QHBoxLayout()
#         self.widget_layout = QVBoxLayout()

#         for button_number in range(1, 11):## function creates 10 buttons and adds them to the button_layout
#             button = QToolButton()
#             button.setText(str(button_number))
#             button.setObjectName('Button%d' % button_number)
#             button.released.connect(self.button_released)
#             self.button_layout.addWidget(button)

#         self.status_label = QLabel('No button clicked')
#         self.widget_layout.addLayout(self.button_layout)# this works also because adds a layout
#         # self.widget_layout.addItem(self.button_layout) 
#         # self.widget_layout.addLayout(self.status_label)# cannot use this since label is not a layout
#         self.widget_layout.addWidget(self.status_label)
#         # self.widget_layout.addItem(self.status_label)## not work
#         self.setLayout(self.widget_layout)

#     def button_released(self):
#         sending_button = self.sender()
#         self.status_label.setText('%s Clicked!' % str(sending_button.objectName()))




# if __name__ == '__main__':
#   app = QApplication(sys.argv)

#   widget = Widget()
#   widget.show()

#   sys.exit(app.exec_())
##~~~
# Yes, you can use .sender() in a QMainWindow. The .sender() method is part of the QObject class in PyQt/PySide, and since QMainWindow inherits from QObject, it has access to this method.

# The .sender() method is typically used within a slot (a method connected to a signal) to determine which object emitted the signal. This is useful when multiple objects are connected to the same slot, and you need to differentiate between them.

# Here’s an example of using .sender() in a QMainWindow:

#         super().__init__()
# Key Points:
# .sender() works in any class that inherits from QObject, including QMainWindow.
# It is typically used in slots to identify the signal emitter.
# Be cautious when using .sender() in complex applications, as it can make debugging harder if overused. Explicitly passing information (e.g., using lambda functions) is often a cleaner alternative.
###
# from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QVBoxLayout, QWidget

# class MainWindow(QMainWindow):
#     def __init__(self):
#         super().__init__()

#         self.setWindowTitle("Sender Example")

#         # Create buttons
#         button1 = QPushButton("Button 1")
#         button2 = QPushButton("Button 2")

#         # Connect buttons to the same slot
#         button1.clicked.connect(self.handle_button_click)
#         button2.clicked.connect(self.handle_button_click)

#         # Layout
#         layout = QVBoxLayout()
#         layout.addWidget(button1)
#         layout.addWidget(button2)

#         container = QWidget()
#         container.setLayout(layout)
#         self.setCentralWidget(container)

#     def handle_button_click(self):
#         # Determine which button was clicked
#         sender = self.sender()
#         if sender:
#             print(f"{sender.text()} was clicked!")

# app = QApplication([])
# window = MainWindow()
# window.show()
# app.exec_()