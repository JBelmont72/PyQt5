
## 20 April 11 AM this is my most recent version of the calculator
# MyCalc_1.py
# This is a simple calculator application using PyQt5. I am using MyCalc_backup_1.py as the UI file generated by Qt Designer.
# It includes basic arithmetic operations and a simple user interface.  
import sys
from PyQt5.QtWidgets import QMainWindow, QApplication
# from MyCalc_backup_1 import Ui_MainWindow  # assuming this file is saved as calc.py
from MyCalc_backup_1 import Ui_MyCalculator  # assuming this file is saved as calc.py

class Calculator(QMainWindow, Ui_MyCalculator):
# class Calculator(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.init_signals()

    def init_signals(self):
        self.oneButton.clicked.connect(lambda: self.input_digit("1"))
        self.twoButton.clicked.connect(lambda: self.input_digit("2"))
        self.threeButton.clicked.connect(lambda: self.input_digit("3"))
        self.fourButton.clicked.connect(lambda: self.input_digit("4"))
        self.fiveButton.clicked.connect(lambda: self.input_digit("5"))
        self.sixButton.clicked.connect(lambda: self.input_digit("6"))
        self.sevenButton.clicked.connect(lambda: self.input_digit("7"))
        self.eightButton.clicked.connect(lambda: self.input_digit("8"))
        self.nineButton.clicked.connect(lambda: self.input_digit("9"))
        self.zeroButton.clicked.connect(lambda: self.input_digit("0"))
        self.pointButton.clicked.connect(lambda: self.add_decimal())  # Decimal button
        self.PlusMinusButton.clicked.connect(self.toggle_sign)  # Plus/Minus button
        self.logButton.clicked.connect(lambda:self.input_digit("log"))  # Clear button sets display to "0"
        self.plusButton.clicked.connect(lambda: self.input_operator("+"))
        self.minusButton.clicked.connect(lambda: self.input_operator("-"))
        ## self.multiplyButton.clicked.connect(lambda: self.input_operator("*"))
        self.divideButton.clicked.connect(lambda: self.input_operator("/"))
        self.XButton.clicked.connect(lambda: self.input_operator("*"))  # Multiplication button
        # self.equalButton.clicked.connect(lambda: self.press_it('='))
        self.equalButton.clicked.connect(lambda: self.calculate_result())
        self.percentButton.clicked.connect(lambda: self.input_operator("%"))
        # self.pointButton.clicked.connect(self.add_decimal)  # Decimal button
        self.cButton.clicked.connect(lambda: self.press_it('C'))  # Clear button sets display to "0"
        # self.cButton.clicked.connect(lambda: self.input_operator("C"))  # Clear button sets display to "0"
        # self.backspaceButton.clicked.connect(self.remove_it)  # Backspace button
        # self.clearButton.clicked.connect(self.clear_display)
        # self.shiftButton.clicked.connect(self.toggle_sign)
        # self.decimalButton.clicked.connect(self.add_decimal)
        # self.pushButton_1 = QtWidgets.QPushButton(self.centralwidget,clicked = lambda:self.press_it('1')) from # MyCalc_backup_1 import Ui_MainWindow
        ## i took the pushButton_4 out of the init_signals function and added it here, it is the back space button
        # self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget,clicked = lambda:self.press_it('<<'))
        self.pushButton_4.clicked.connect(self.remove_it)  # Backspace button
        # self.C_Button.clicked.connect(self.clear_display)
        # self.shiftButton.clicked.connect(self.toggle_sign)
        self.squareButton.clicked.connect(lambda: self.input_operator("**2"))  # Square button
        self.squareRootButton.clicked.connect(lambda: self.input_operator("√"))  # Square root button
        # self.cubeButton.clicked.connect(lambda: self.input_operator("**3"))  # Cube button
        # self.cubeRootButton.clicked.connect(lambda: self.input_operator("∛"))  # Cube root button
        # self.factorialButton.clicked.connect(lambda: self.input_operator("!"))  # Factorial button
        self.piButton.clicked.connect(lambda: self.input_operator("π"))  # Pi button
        # self.eButton.clicked.connect(lambda: self.input_operator("e"))  # Euler's number button
        self.sineButton.clicked.connect(lambda: self.input_operator("sin"))  # Sine button
        # self.cosButton.clicked.connect(lambda: self.input_operator("cos"))  # Cosine button
        # self.tanButton.clicked.connect(lambda: self.input_operator("tan"))  # Tangent button
        # self.asinButton.clicked.connect(lambda: self.input_operator("asin"))  # Inverse sine button
        # self.acosButton.clicked.connect(lambda: self.input_operator("acos"))  # Inverse cosine button
        # self.atanButton.clicked.connect(lambda: self.input_operator("atan"))  # Inverse tangent button
        # self.sinhButton.clicked.connect(lambda: self.input_operator("sinh"))  # Hyperbolic sine button
    def input_digit(self, digit):
        current = self.ResultLabel.text()
        if current == "0":
            self.ResultLabel.setText(digit)
        else:
            self.ResultLabel.setText(current + digit)

    def input_operator(self, operator):
        current = self.ResultLabel.text()
        self.ResultLabel.setText(current + " " + operator + " ")
    def calculate_result(self):
        try:
            expression = self.ResultLabel.text()
            # Replace '√' with 'sqrt' for evaluation
            expression = expression.replace("√", "sqrt")
            # Evaluate the expression
            result = eval(expression)
            self.ResultLabel.setText(str(result))
        except Exception as e:
            self.ResultLabel.setText("Error")

    def clear_display(self):        ## not currently using this function
        # Clear the display
        self.ResultLabel.setText("0")

    def toggle_sign(self):
        text = self.ResultLabel.text()
        if text.startswith("-"):
            self.ResultLabel.setText(text[1:])
        elif text != "0":
            self.ResultLabel.setText("-" + text)
      
    def remove_it(self):
        #remove character
        #grab what is on the screen
        #remove last character
        screen= self.ResultLabel.text()
        screen=screen[:-1]
        self.ResultLabel.setText(screen)  
    
    def add_decimal(self):
        current_text = self.ResultLabel.text()
        
        # if not current_text:    ## i can do without this line since i already set the label to 0
        #     # If the label is empty, start with '0.'
        #     # Start with '0.' if it's empty
        #     self.ResultLabel.setText("0.")
        #     return

        # Find the last operator (split point for the most recent number)
        last_operator_pos = -1
        for op in ['+', '-', '*', '/']:
            pos = current_text.rfind(op)
            if pos > last_operator_pos:
                last_operator_pos = pos

        # Get the last number being typed (after the last operator)
        last_number = current_text[last_operator_pos + 1:]

        # Only add a decimal if that last number doesn't already have one
        if '.' not in last_number:
            self.ResultLabel.setText(current_text + '.')

    
    def press_it(self,pressed):       ## WORKS
        # self.ResultLabel.setText(pressed)
        if pressed == 'C':
            pressed='0'
            self.ResultLabel.setText(pressed)
        else:
            ## Check if the last character  starts with a 0
            if self.ResultLabel.text() == '0':## if the entire label is 0
                self.ResultLabel.setText(pressed) ## set the label to the pressed button
                # self.ResultLabel.setText(' ')
            else:
                self.ResultLabel.setText(f'{self.ResultLabel.text()}{pressed}') ##   concatenate the pressed button to the label
        
        
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = Calculator()
    window.show()
    sys.exit(app.exec_())

### these are functions i worked on in the past but they are not used in the current version of the calculator
   
#     def remove_it(self):
#         #remove character
#         #grab what is on the screen
#         #remove last character
#         screen= self.ResultLabel.text()
#         screen=screen[:-1]
#         self.ResultLabel.setText(screen)        
#     def press_plus_minus(self):
#         expression = self.ResultLabel.text()
#         if not expression:
#             return

#         import re

#         # Match the last number (may be preceded by a '+' or '-' or nothing)
#         match = re.search(r'([+\-]?)(\d+(\.\d+)?)(?!.*\d)', expression)
#         if match:
#             full_match = match.group(0)
#             sign = match.group(1)
#             number = match.group(2)

#             # Toggle sign
#             if sign == '-':
#                 new_number = number  # Remove minus
#             else:
#                 new_number = '-' + number  # Add minus

#             # Replace in expression
#             start, end = match.span()
#             new_expression = expression[:start] + new_number + expression[end:]
#             self.ResultLabel.setText(new_expression)


#     # add a decimal
#     # def add_decimal(self):
#     #     screen= self.ResultLabel.text()
#     #     if '.' in self.ResultLabel.text():## if the label already has a decimal
#     #         pass
#     #     else:   
#     #         self.ResultLabel.setText(f'{self.ResultLabel.text()}.')## add a decimal to the label
#     ## will creeate a list of pressed buttons
#     # def add_decimal(self):
#     #     screen= self.ResultLabel.text()
#     #     if screen[-1] == '.':
#     #         pass
#     #     else:
#     #         # screen=screen+'.'
#     #         # self.ResultLabel.setText(screen + '.') ## add a decimal to the label
#     #         self.ResultLabel.setText(f'{screen}.')## will create a list of pressed buttons
                    
#     # ## add a decimal
#     # def add_decimal(self):
#     #     screen= self.ResultLabel.text()
#     #     if '.' in self.ResultLabel.text():## if the label already has a decimal
#     #         pass
#     #     else:   
#     #         self.ResultLabel.setText(f'{self.ResultLabel.text()}.')## add a decimal to the label

#      # change from positive  to negative and # vice versa
#     # def press_plus_minus(self):
#     #     expression = self.ResultLabel.text()
#     #     if not expression:
#     #         return

#     #     import re

#     #     # Find the last number using regex
#     #     match = re.search(r'([-+]?\d*\.?\d+)(?!.*\d)', expression)
#     #     if match:
#     #         start, end = match.span()
#     #         number = match.group()

#     #         # Toggle sign
#     #         if number.startswith('-'):
#     #             new_number = number[1:]  # Remove minus
#     #         else:
#     #             new_number = '-' + number  # Add minus

#     #         # Replace in expression
#     #         new_expression = expression[:start] + new_number + expression[end:]
#     #         self.ResultLabel.setText(new_expression)
# ## the above uses rege and does not work with decimal numbers
# # the current implementation is inserting signs without properly replacing the number. That's because the regex is finding the last number without considering the operators before it. So it's not actually replacing 34 — it's just adding - before 34, not toggling.
# # Let’s fix that so the sign toggle affects only the last number, and does not stack symbols like --+34.
# # ✅ Desired Behavior:

# # Input	After ± Press	After ± Again
# # 12+34	12+-34	12+34
# # -45	45	-45
# # 🧠 Fix: Smarter Regex and Replacement
# # We’ll:
# # Detect the last number including any negative sign.
# # Replace it with the opposite sign version.
# # corrected
# def press_plus_minus(self):
#     expression = self.ResultLabel.text()
#     if not expression:
#         return

#     import re

#     # Match the last number (may be preceded by a '+' or '-' or nothing)
#     match = re.search(r'([+\-]?)(\d+(\.\d+)?)(?!.*\d)', expression)
#     if match:
#         full_match = match.group(0)
#         sign = match.group(1)
#         number = match.group(2)

#         # Toggle sign
#         if sign == '-':
#             new_number = number  # Remove minus
#         else:
#             new_number = '-' + number  # Add minus

#         # Replace in expression
#         start, end = match.span()
#         new_expression = expression[:start] + new_number + expression[end:]
#         self.ResultLabel.setText(new_expression)

         
#     ## add a decimal
# # def add_decimal(self):
#         # screen= self.ResultLabel.text()
#         # screen=screen+'.'
#         # self.ResultLabel.setText(screen)

#     def add_decimal(self):
#         current_text = self.ResultLabel.text()
        
#         if not current_text:    ## i can do wothout this line since i already set the label to 0
#             # If the label is empty, start with '0.'
#             # Start with '0.' if it's empty
#             self.ResultLabel.setText("0.")
#             return

#         # Find the last operator (split point for the most recent number)
#         last_operator_pos = -1
#         for op in ['+', '-', '*', '/']:
#             pos = current_text.rfind(op)
#             if pos > last_operator_pos:
#                 last_operator_pos = pos

#         # Get the last number being typed (after the last operator)
#         last_number = current_text[last_operator_pos + 1:]

#         # Only add a decimal if that last number doesn't already have one
#         if '.' not in last_number:
#             self.ResultLabel.setText(current_text + '.')

    
#     def press_it(self,pressed):       ## WORKS
#         # self.ResultLabel.setText(pressed)
#         if pressed == 'C':
#             pressed='0'
#             self.ResultLabel.setText(pressed)
#         else:
#             ## Check if the last character  starts with a 0
#             if self.ResultLabel.text() == '0':## if the entire label is 0
#                 self.ResultLabel.setText(pressed) ## set the label to the pressed button
#                 # self.ResultLabel.setText(' ')
#             else:
#                 self.ResultLabel.setText(f'{self.ResultLabel.text()}{pressed}') ##   concatenate the pressed button to the label
                     
        
#     # def press_it(self,pressed):
#     #     while True:
#     #         if pressed == 'C':
#     #             pressed='0'
#     #             self.ResultLabel.setText(pressed)
#     #         else:
#     #             self.ResultLabel.setText(pressed)
#         # else:    
#         #     while True:   
        
#         #         pressList=[]
#         #         pressList =pressList.append(pressed)
#         #         try:
#         #             if pressList >1:
#         #                 self.ResultLabel.setText(f'{self.ResultLabel.setText(pressed)}{pressed}')
                        
#         #             else:
#         #                 self.ResultLabel.setText(pressed)
                        
#         #         except:
#         #             pass    
                
            
            
            
               

#         # self.ResultLabel.setText(f'{self.ResultLabel.setText(pressed)}{pressed}')
#             # self.ResultLabel.setText(pressed)
        



# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     MainWindow = QtWidgets.QMainWindow()
#     ui = Ui_MyCalculator()
#     ui.setupUi(MainWindow)
#     MainWindow.show()
#     sys.exit(app.exec_())# def add_decimal(self):







###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## the below works but without my styling##
# import sys
# from PyQt5 import QtCore, QtGui, QtWidgets
# from PyQt5.QtWidgets import QApplication, QMainWindow

# class Ui_MyCalculator(object):
#     def setupUi(self, MyCalculator):
#         MyCalculator.setObjectName("MyCalculator")
#         MyCalculator.resize(400, 600)
#         self.centralwidget = QtWidgets.QWidget(MyCalculator)
#         self.centralwidget.setObjectName("centralwidget")

#         self.resultLabel = QtWidgets.QLabel(self.centralwidget)
#         self.resultLabel.setGeometry(QtCore.QRect(10, 10, 380, 60))
#         font = QtGui.QFont()
#         font.setPointSize(24)
#         self.resultLabel.setFont(font)
#         self.resultLabel.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
#         self.resultLabel.setObjectName("resultLabel")
#         self.resultLabel.setText("0")

#         self.create_buttons()
#         MyCalculator.setCentralWidget(self.centralwidget)
#         QtCore.QMetaObject.connectSlotsByName(MyCalculator)

#     def create_buttons(self):
#         button_defs = [
#             ('1', 10, 130), ('2', 110, 130), ('3', 210, 130), ('+', 310, 130),
#             ('4', 10, 230), ('5', 110, 230), ('6', 210, 230), ('-', 310, 230),
#             ('7', 10, 330), ('8', 110, 330), ('9', 210, 330), ('*', 310, 330),
#             ('0', 10, 430), ('.', 110, 430), ('=', 210, 430), ('/', 310, 430),
#             ('C', 10, 530), ('±', 110, 530), ('⌫', 210, 530)
#         ]

#         for text, x, y in button_defs:
#             btn = QtWidgets.QPushButton(self.centralwidget)
#             btn.setGeometry(QtCore.QRect(x, y, 90, 80))
#             font = QtGui.QFont()
#             font.setPointSize(20)
#             btn.setFont(font)
#             btn.setText(text)

#             if text.isdigit() or text in "+-*/":
#                 btn.clicked.connect(lambda checked, val=text: self.press_it(val))
#             elif text == '.':
#                 btn.clicked.connect(self.add_decimal)
#             elif text == 'C':
#                 btn.clicked.connect(lambda: self.resultLabel.setText("0"))
#             elif text == '=':
#                 btn.clicked.connect(self.calculate_result)
#             elif text == '⌫':
#                 btn.clicked.connect(self.remove_it)
#             elif text == '±':
#                 btn.clicked.connect(self.press_plus_minus)

#     def press_it(self, value):
#         current = self.resultLabel.text()
#         if current == "0" and value not in "+-*/":
#             self.resultLabel.setText(value)
#         else:
#             self.resultLabel.setText(current + value)

#     def remove_it(self):
#         current = self.resultLabel.text()
#         if len(current) > 1:
#             self.resultLabel.setText(current[:-1])
#         else:
#             self.resultLabel.setText("0")

#     def press_plus_minus(self):
#         current = self.resultLabel.text()
#         if current.startswith('-'):
#             self.resultLabel.setText(current[1:])
#         elif current != "0":
#             self.resultLabel.setText('-' + current)

#     def add_decimal(self):
#         current = self.resultLabel.text()
#         parts = current.split('+') if '+' in current else \
#                 current.split('-') if '-' in current[1:] else \
#                 current.split('*') if '*' in current else \
#                 current.split('/') if '/' in current else [current]

#         if '.' not in parts[-1]:
#             self.resultLabel.setText(current + '.')

#     def calculate_result(self):
#         try:
#             result = eval(self.resultLabel.text())
#             self.resultLabel.setText(str(result))
#         except:
#             self.resultLabel.setText("Error")

# if __name__ == "__main__":
#     app = QApplication(sys.argv)
#     MainWindow = QMainWindow()
#     ui = Ui_MyCalculator()
#     ui.setupUi(MainWindow)
#     MainWindow.show()
#     sys.exit(app.exec_())
