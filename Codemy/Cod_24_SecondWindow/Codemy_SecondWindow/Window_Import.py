'''
 https://chatgpt.com/c/683f6685-7500-800f-9d41-d76f34d4c7fb
 
from Window1 import Ui_MainWindow as Ui_MainWindow1
from Window2 import Ui_SecondWindow as Ui_MainWindow2
from Window3 import Ui_ThirdWindow as Ui_MainWindow3
from PyQt5 import QtCore, QtGui, QtWidgets as qtc,qtg,qtw



class Ui_MainWindow(object): #     from Window_1
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(513, 301)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        
        
class Ui_SecondWindow(object):  #  from Window_2
    def setupUi(self, SecondWindow):
        SecondWindow.setObjectName("SecondWindow")   
        
class Ui_ThirdWindow(object):    #  from Window_3
    def setupUi(self, ThirdWindow):
        ThirdWindow.setObjectName("ThirdWindow")
        
        
self.third_window = qtw.QMainWindow()  # ❌ This is a QMainWindow
self.third_ui = Ui_MainWindow3()       # ✅ This is a QDialog-based layout
self.third_ui.setupUi(self.third_window)  # ❌ Passing QMainWindow into a QDialog setup
Use .exec_() if the dialog is meant to collect input or block other windows (e.g., a "Save" dialog).
Use .show() if it’s just a notification or something casual (like “Success!”).

'''
from PyQt5 import QtCore as qtc
from PyQt5 import QtGui as qtg
from PyQt5 import QtWidgets as qtw
import sys
# import the UI classes generated by pyuic5
from Window1 import Ui_MainWindow as Ui_MainWindow1
from Window2 import Ui_SecondWindow as Ui_MainWindow2
# from Window3 import Ui_ThirdWindow as Ui_MainWindow3
from Window4_Dialog import Ui_Dialog as Ui_MainWindow3


# Define a proper Main Window class to encapsulate logic
class MainWindow(qtw.QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow1()
        self.ui.setupUi(self)
        self.ui.pushButton.clicked.connect(self.open_second_window)  # Connect pushButton to open second window
        self.statusBar=self.ui.statusbar
        self.statusBar.showMessage("Welcome to the Main Window")  # Set initial status bar message
        self.statusBar.setStyleSheet("background-color: lightgray;")  # Set status bar style
    def open_second_window(self):
        # Create a new QMainWindow and apply the Ui_SecondWindow layout to it
        self.second_window = qtw.QMainWindow()  # This is a real window
        self.second_ui = Ui_MainWindow2()       # This is the layout/setup
        self.second_ui.setupUi(self.second_window)
        self.second_ui.pushButton.clicked.connect(self.open_third_window)  # connect second window's button
        
        self.menubar =self.second_ui.menubar
        self.menubar.setStyleSheet("background-color: lightblue;")
        self.statusbar = self.second_ui.statusbar
        self.statusbar.setStyleSheet("background-color: lightgreen;")
        self.second_window.show()  # Now it can be shown!

    def open_third_window(self):
        # Create a new QDialog  and apply the Ui_ThirdWindow layout to it
        self.third_window = qtw.QDialog()  # Using QDialog for the third window
        self.third_window.setWindowTitle("Third Window")
        self.third_ui = Ui_MainWindow3()
        self.third_ui.setupUi(self.third_window)
        self.third_ui.label.setText("Welcome to the Third Window!")
        self.third_ui.buttonBox.accepted.connect(self.third_window.accept)  # Connect buttonBox to accept
        self.third_ui.buttonBox.rejected.connect(self.third_window.reject)  # Connect buttonBox to reject
        self.third_window.exec_()  # Open modally (blocks other windows until closed)
    #     # OR use: self.third_window.show() for non-modal
    #     # Open modally (blocks other windows until closed)
    # def open_third_window(self): ## use this with a third window as a QDialog: Codemy/Cod_24_SecondWindow/Codemy_SecondWindow/Window4_Dialog.py
    #     self.third_window = qtw.QDialog(self)  # ✅ Create a QDialog instance, not QMainWindow
    #     self.third_ui = Ui_MainWindow3()       # ✅ This is your Ui_Dialog
    #     self.third_ui.setupUi(self.third_window)  # ✅ Apply the dialog layout to the dialog
    #     self.third_window.exec_()  # ✅ Open modally (blocks other windows until closed)
    #     # OR use: self.third_window.show() for non-modal

    
    
    # def open_third_window(self): ## use this if you want a third window as a QMainWindow :Codemy/Cod_24_SecondWindow/Codemy_SecondWindow/Window3.py
    #     # Create a new QMainWindow and apply the Ui_ThirdWindow layout to it
    #     self.third_window = qtw.QMainWindow()
    #     self.third_ui = Ui_MainWindow3()
    #     self.third_ui.setupUi(self.third_window)
    #     self.third_window.show()


if __name__ == "__main__":
    import sys
    app = qtw.QApplication(sys.argv)
    main_win = MainWindow()  # Instantiate the class-based main window
    main_win.show()  # Show the main window
    sys.exit(app.exec_())



# from Window1 import Ui_MainWindow as Ui_MainWindow1
# from Window2 import Ui_SecondWindow as Ui_MainWindow2
# from Window3 import Ui_ThirdWindow as Ui_MainWindow3
# from PyQt5 import QtCore as qtc
# from PyQt5 import QtGui as qtg
# from PyQt5 import  QtWidgets as qtw


# class Ui_MainWindow(object):  # from Window_1
#     def setupUi(self, MainWindow):
#         MainWindow.setObjectName("MainWindow")
#         MainWindow.resize(513, 301)
#         self.centralwidget = qtc.QWidget(MainWindow)
#         self.centralwidget.setObjectName("centralwidget")
#         self.pushButton = qtc.QPushButton(self.centralwidget)
#         self.pushButton.clicked.connect(self.openSecondWindow)
#         self.pushButton.setGeometry(qtc.QRect(160, 30, 201, 151))
#         font = qtg.QFont()
#         font.setFamily("Papyrus")
#         font.setPointSize(24)
#         self.pushButton.setFont(font)
#         self.pushButton.setObjectName("pushButton")
#         MainWindow.setCentralWidget(self.centralwidget)
#         self.menubar = qtc.QMenuBar(MainWindow)
#         self.menubar.setGeometry(qtc.QRect(0, 0, 513, 37))
#         self.menubar.setObjectName("menubar")
#         MainWindow.setMenuBar(self.menubar)
#         self.statusbar = qtc.QStatusBar(MainWindow)
#         self.statusbar.setObjectName("statusbar")
#         MainWindow.setStatusBar(self.statusbar)

#         self.retranslateUi(MainWindow)
#         qtc.QMetaObject.connectSlotsByName(MainWindow)
#     def retranslateUi(self, MainWindow):
#         _translate = qtc.QCoreApplication.translate
#         MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
#         self.pushButton.setText(_translate("MainWindow", "Open Window"))
#     def openSecondWindow(self):
#         self.secondWindow= Ui_SecondWindow()
#         self.secondWindow.show()
# class Ui_SecondWindow(object):  # from Window_2
#     def setupUi(self, SecondWindow):
#         SecondWindow.setObjectName("SecondWindow")
#         SecondWindow.resize(380, 370)
#         font = qtg.QFont()
#         font.setFamily("Papyrus")
#         font.setPointSize(18)
#         SecondWindow.setFont(font)
#         self.centralwidget = qtc.QWidget(SecondWindow)
#         self.centralwidget.setObjectName("centralwidget")
#         self.verticalLayoutWidget = qtc.QWidget(self.centralwidget)
#         self.verticalLayoutWidget.setGeometry(qtc.QRect(70, 60, 226, 231))
#         self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
#         self.verticalLayout = qtc.QVBoxLayout(self.verticalLayoutWidget)
#         self.verticalLayout.setContentsMargins(0, 0, 0, 0)
#         self.verticalLayout.setObjectName("verticalLayout")
#         self.label = qtc.QLabel(self.verticalLayoutWidget)
#         self.label.setObjectName("label")
#         self.verticalLayout.addWidget(self.label)
#         self.pushButton = qtc.QPushButton(self.verticalLayoutWidget)
#         self.pushButton.setObjectName("pushButton")
#         self.verticalLayout.addWidget(self.pushButton)
#         SecondWindow.setCentralWidget(self.centralwidget)
#         self.menubar = qtc.QMenuBar(SecondWindow)
#         self.menubar.setGeometry(qtc.QRect(0, 0, 380, 37))
#         self.menubar.setObjectName("menubar")
#         SecondWindow.setMenuBar(self.menubar)
#         self.statusbar = qtc.QStatusBar(SecondWindow)
#         self.statusbar.setObjectName("statusbar")
#         SecondWindow.setStatusBar(self.statusbar)

#         self.retranslateUi(SecondWindow)
#         qtc.QMetaObject.connectSlotsByName(SecondWindow)

#     def retranslateUi(self, SecondWindow):
#         _translate = qtc.QCoreApplication.translate
#         SecondWindow.setWindowTitle(_translate("SecondWindow", "MainWindow"))
#         self.label.setText(_translate("SecondWindow", "Second WIndow Opened"))
#         self.pushButton.setText(_translate("SecondWindow", "Open Window #3"))
# class Ui_ThirdWindow(object):  # from Window_3
#     def setupUi(self, ThirdWindow):
#         ThirdWindow.setObjectName("ThirdWindow")
#         ThirdWindow.resize(467, 279)
#         self.centralwidget = qtc.QWidget(ThirdWindow)
#         self.centralwidget.setObjectName("centralwidget")
#         self.label = qtc.QLabel(self.centralwidget)
#         self.label.setGeometry(qtc.QRect(60, 50, 361, 61))
#         self.label.setObjectName("label")
#         ThirdWindow.setCentralWidget(self.centralwidget)
#         self.menubar = qtc.QMenuBar(ThirdWindow)
#         self.menubar.setGeometry(qtc.QRect(0, 0, 467, 37))
#         self.menubar.setObjectName("menubar")
#         ThirdWindow.setMenuBar(self.menubar)
#         self.statusbar = qtc.QStatusBar(ThirdWindow)
#         self.statusbar.setObjectName("statusbar")
#         ThirdWindow.setStatusBar(self.statusbar)

#         self.retranslateUi(ThirdWindow)
#         qtc.QMetaObject.connectSlotsByName(ThirdWindow)

#     def retranslateUi(self, ThirdWindow):
#         _translate = qtc.QCoreApplication.translate
#         ThirdWindow.setWindowTitle(_translate("ThirdWindow", "MainWindow"))
#         self.label.setText(_translate("ThirdWindow", "<html><head/><body><p><span style=\" font-size:36pt; font-weight:600; vertical-align:super;\">  Third WIndow Opened. Hurray!!</span></p></body></html>"))
# # The above code imports the necessary classes from the respective window files and sets up the UI for each window.
# # The Ui_MainWindow, Ui_SecondWindow, and Ui_ThirdWindow classes define the layout and components of each window.
# # This allows for a modular approach to building the application, where each window can be defined and modified independently.
# # The code also includes the necessary imports from PyQt5 to create the GUI elements such as buttons, labels, and layouts.
# if __name__ == "__main__":
#     import sys
#     app = qtw.QApplication(sys.argv)
#     MainWindow = qtw.QMainWindow()
#     ui = Ui_MainWindow1()
#     ui.setupUi(MainWindow)
#     MainWindow.show()
#     sys.exit(app.exec_())
'''
from Window1:
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(513, 301)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
from Window2:
class Ui_SecondWindow(object):  # from Window_2
class Ui_SecondWindow(object): was imported as Ui_MainWindow2
    def setupUi(self, SecondWindow):
        SecondWindow.setObjectName("SecondWindow")   


window4_Dialog.py

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
'''   
# from PyQt5 import QtCore as qtc
# from PyQt5 import QtGui as qtg
# from PyQt5 import QtWidgets as qtw
# import sys
# # import the UI classes generated by pyuic5
# from Window1 import Ui_MainWindow as Ui_MainWindow1
# from Window2 import Ui_SecondWindow as Ui_MainWindow2
# # from Window3 import Ui_ThirdWindow as Ui_MainWindow3
# from Window4_Dialog import Ui_Dialog as Ui_MainWindow3


# # Define a proper Main Window class to encapsulate logic
# class MainWindow(qtw.QMainWindow):
#     def __init__(self):
#         super().__init__()
#         self.ui = Ui_MainWindow1()
#         self.ui.setupUi(self)
#         self.ui.pushButton.clicked.connect(self.open_second_window)  # Connect pushButton to open second window
#         self.statusBar=self.ui.statusbar
#         self.statusBar.showMessage("Welcome to the Main Window")  # Set initial status bar message
#         self.statusBar.setStyleSheet("background-color: lightgray;")  # Set status bar style
#     def open_second_window(self):
#         # Create a new QMainWindow and apply the Ui_SecondWindow layout to it
#         self.second_window = qtw.QMainWindow()  # This is a real window
#         self.second_ui = Ui_MainWindow2()       # This is the layout/setup
#         self.second_ui.setupUi(self.second_window)
#         self.second_ui.pushButton.clicked.connect(self.open_third_window)  # connect second window's button
        
#         self.menubar =self.second_ui.menubar
#         self.menubar.setStyleSheet("background-color: lightblue;")
#         self.statusbar = self.second_ui.statusbar
#         self.statusbar.setStyleSheet("background-color: lightgreen;")
#         self.second_window.show()  # Now it can be shown!

#     # def open_third_window(self):
#     #     # Create a new QMainWindow and apply the Ui_ThirdWindow layout to it
#     #     self.third_window = qtw.QDialog()  # Using QDialog for the third window
#     #     self.third_window.setWindowTitle("Third Window")
#     #     self.third_ui = Ui_MainWindow3()
#     #     self.third_ui.setupUi(self.third_window)
#     #     self.third_ui.label.setText("Welcome to the Third Window!")
#     def open_third_window(self): ## use this with a third window as a QDialog: Codemy/Cod_24_SecondWindow/Codemy_SecondWindow/Window4_Dialog.py
#         self.third_window = qtw.QDialog(self)  # ✅ Create a QDialog instance, not QMainWindow
#         self.third_ui = Ui_MainWindow3()       # ✅ This is your Ui_Dialog
#         self.third_ui.setupUi(self.third_window)  # ✅ Apply the dialog layout to the dialog
#         self.third_ui.label.setText("Welcome to the Third Window!")
#         # Open modally (blocks other windows until closed)
#         #  OR use: self.third_window.show() for non-modal   
#         self.third_window.exec_()  # ✅ Open modally (blocks other windows until closed)
#         # OR use: self.third_window.show() for non-modal

    
    
#     # def open_third_window(self): ## use this if you want a third window as a QMainWindow :Codemy/Cod_24_SecondWindow/Codemy_SecondWindow/Window3.py
#     #     # Create a new QMainWindow and apply the Ui_ThirdWindow layout to it
#     #     self.third_window = qtw.QMainWindow()
#     #     self.third_ui = Ui_MainWindow3()
#     #     self.third_ui.setupUi(self.third_window)
#     #     self.third_window.show()


# if __name__ == "__main__":
#     import sys
#     app = qtw.QApplication(sys.argv)
#     main_win = MainWindow()  # Instantiate the class-based main window
#     main_win.show()  # Show the main window
#     sys.exit(app.exec_())
