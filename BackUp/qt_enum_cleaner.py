'''The first cleaner works, 
Python script that will clean up .py files generated by pyuic5 and fix common :: enum issues like QtCore.Qt.AlignCenter, QtCore.QtCore.Qt.AlignCenter, etc
to run:  python qt_enum_cleaner.py HelloWorld.py
remember to make a backup of your file before running this script:cp HelloWorld.py HelloWorld_backup.py
for the whole folder cleaner  project structure
your_project/
├── qt_enum_cleaner.py
├── HelloWorld.py
└── subfolderName/
    └── another_ui_file.py
this is the tester code that i had to add to the cleaned file to test the changes:
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

Example of correction formats to look for:
self.myLabel.setAlignment(QtCore.Qt.Qt::AlignmentFlag::AlignCenter) is wrong
self.myLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter) is correct
From calc.py:
self.OutputLabel.setFrameShape(QtCore.Qt.QFrame::Shape::Box) is wrong
self.OutputLabel.setFrameShape(QtCore.Qt.QFrame.Shape.Box) is correct
self.OutputLabel.setFrameShape(QtCore.Qt.QFrame::Shape::Box)


GitHub.copilot-chat.github.copilot.editor: Made changes.

JBelmont72: what is the correct version of # self.OutputLabel.setFrameShape(QtCore.Qt.QFrame::Shape::Box)

GitHub.copilot-chat.github.copilot.editor: The syntax you provided is incorrect because Python does not use `::` for accessing members. Instead, Python uses the dot (`.`) operator. Here's the corrected version:

```python
self.OutputLabel.setFrameShape(QtCore.QFrame.Shape.Box)
```

### Explanation:
1. **`QtCore.QFrame.Shape.Box`**:
   - `QtCore.QFrame` refers to the `QFrame` class in the `QtCore` module.
   - `Shape` is an enumeration within `QFrame` that defines different frame shapes.
   - `Box` is one of the possible values of the `Shape` enumeration.

2. **`setFrameShape`**:
   - This method is used to set the shape of the frame for a `QFrame`-based widget (like `OutputLabel` in your case).

Make sure that `self.OutputLabel` is an instance of a `QFrame` or a subclass of it (e.g., `QLabel`), as this method is specific to `QFrame`.





''' 
########improved to clean all files in the folder
# import re     # Import the regular expression module
# import sys    # Import the system module for command-line arguments                           
# enum_cleaner.py
# Save the script in your project directory (or globally if you like).

# python enum_cleaner.py MyPyQtAppFolder
# Or for a single file:

# python enum_cleaner.py HelloWorld.py
#############################################################
import sys        ## this version works and I have to add the if __name__ == "__main__": block to the cleaned file to test the changes
import os
import re
from pathlib import Path

def clean_enum_syntax(code):
    # Step 1: Replace C++ style Qt.Something.Enum with Qt.Something.Enum
    code = re.sub(r'Qt::(\w+)::(\w+)', r'Qt.\1.\2', code)

    # Step 2: Replace Qt.Something with Qt.Something (single colon)
    code = re.sub(r'Qt::(\w+)', r'Qt.\1', code)

    # Step 3: Fix overly repeated prefixes like QtCore.Qt.AlignCenter -> QtCore.Qt.AlignCenter
    code = re.sub(r'((QtCore|QtGui)\.)?(Qt\.)(Qt\.)+', r'QtCore.Qt.', code)

    # Step 4: Fix cases where enums were merged without a dot (AlignCenterAlignMiddle -> AlignCenter.AlignMiddle)
    # Optional: Add your custom patterns here if needed

    return code

'''
# def clean_enum_syntax(code):
#     # Replace Qt.Enum.Value style with Qt.EnumValue
#     code = re.sub(r'Qt::(\w+)::(\w+)', r'Qt.\1\2', code)

#     # Replace Qt.EnumValue with Qt.EnumValue
#     code = re.sub(r'Qt::(\w+)', r'Qt.\1', code)

#     # Remove excessive repeated prefixes like QtCore.Qt.Qt
#     code = re.sub(r'(QtCore\.|QtGui\.)?(QtCore\.|QtGui\.)*Qt\.', 'QtCore.Qt.', code)

#     return code
'''
def process_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as f:
        original = f.read()

    cleaned = clean_enum_syntax(original)

    if original != cleaned:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(cleaned)
        print(f"✅ Cleaned: {file_path}")
    else:
        print(f"✔️ Already clean: {file_path}")

def process_directory(target):
    path = Path(target)
    if path.is_file() and path.suffix == '.py':
        process_file(path)
    elif path.is_dir():
        for file in path.rglob("*.py"):
            process_file(file)
    else:
        print(f"❌ Not a valid .py file or directory: {target}")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python enum_cleaner.py <file_or_directory>")
    else:
        process_directory(sys.argv[1])