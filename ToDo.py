'''

ToDo.py - A simple To-Do List application using PyQt5.
# This file was generated by PyQt5 UI code generator.
# It provides a user interface for adding, deleting, and clearing items in a to-do list.
# WARNING: Any manual changes made to this file will be lost when pyuic5 is run again.'''

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_myListWindow(object):
    def setupUi(self, myListWindow):
        myListWindow.setObjectName("myListWindow")
        myListWindow.resize(510, 598)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        myListWindow.setFont(font)
        myListWindow.setAcceptDrops(True)
        icon = QtGui.QIcon.fromTheme("QIcon::ThemeIcon::AddressBookNew")
        myListWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(myListWindow)
        self.centralwidget.setObjectName("centralwidget")
        # self.Add_Item = QtWidgets.QPushButton(self.centralwidget)
        self.Add_Item = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.add_it())
        # The lambda function is used to call the add_it method when the button is clicked.
        self.Add_Item.setGeometry(QtCore.QRect(40, 110, 131, 41))
        self.Add_Item.setObjectName("Add_Item")
        # self.Delete_Item = QtWidgets.QPushButton(self.centralwidget)
        self.Delete_Item = QtWidgets.QPushButton(self.centralwidget,clicked = lambda: self.delete_it())
        self.Delete_Item.setGeometry(QtCore.QRect(170, 110, 141, 41))
        self.Delete_Item.setObjectName("Delete_Item")
        self.Clear_Item = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.clear_it())
        self.Clear_Item.setGeometry(QtCore.QRect(310, 110, 141, 41))
        self.Clear_Item.setObjectName("Clear_Item")
        self.myItems = QtWidgets.QLineEdit(self.centralwidget)
        self.myItems.setGeometry(QtCore.QRect(50, 20, 391, 61))
        self.myItems.setObjectName("myItems")
        self.myList = QtWidgets.QListWidget(self.centralwidget)
        self.myList.setGeometry(QtCore.QRect(65, 171, 361, 201))
        self.myList.setObjectName("myList")
        self.myTree = QtWidgets.QTreeWidget(self.centralwidget)
        self.myTree.setGeometry(QtCore.QRect(110, 370, 251, 171))
        self.myTree.setObjectName("myTree")
        self.myTree.headerItem().setText(0, "1")
        myListWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(myListWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 510, 24))
        self.menubar.setObjectName("menubar")
        myListWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(myListWindow)
        self.statusbar.setObjectName("statusbar")
        myListWindow.setStatusBar(self.statusbar)

        self.retranslateUi(myListWindow)
        QtCore.QMetaObject.connectSlotsByName(myListWindow)
    ## Add Item to List
    # def add_it(self):
    #     item_text = self.myItems.text()
    #     if item_text:
    #         self.myList.addItem(item_text)
    #         self.myItems.clear() 
    ## NOTE myList is the name of the list widget, myItems is the name of the line edit 
    def add_it(self):## this takes text in the line edit and adds it to the list widget!!!
        item_text = self.myItems.text() ## get text from line edit
        # Check if the input field is not empty before adding to the list
        # If the input field is empty, it will not add an item to the list.
        # This prevents adding empty items to the list.
        if item_text:## both of the next two lines do the same thing
            # self.myList.addItem(item_text)# Add the item to the list widget!!! myList is the list widget
            self.myList.addItem(QtWidgets.QListWidgetItem(item_text)) # This is another way to add item to the list widget
            self.myItems.clear()# Clear the input field after adding the item
### i have two delete_it functions, one is commented out and the other is not-both work.
    ## Delete Item from List
    # def delete_it(self):
    #     selected_items = self.myList.selectedItems()## myList is the list widget, selectedItems() returns a list of selected items
    
    #     # This line sets the current row of the list widget to the selected item.
    #     # Check if there are any selected items before trying to remove them
    #     # If there are no selected items, it will not try to remove anything.
    #     # This prevents errors when trying to remove items that are not selected.
        
    #     if selected_items:
    #         for item in selected_items:
    #             self.myList.takeItem(self.myList.row(item))## This removes the item from the list widget
                       
    #     # takeItem() removes the item from the list widget and returns it
    #     # row(item) returns the row number of the item in the list widget
    #     # This is used to remove the item from the list widget.
        
    #      ### FOR FUN ONLY: the next four (91,98,99,100) lines are used to get the current row of the selected item in the list widget
    #     # if self.myList.currentItem() is not None:## This checks if there is a current item selected in the list widget
    #         ## If there is a current item selected, it gets the current row of the selected item
    #         ## If there is no current item selected, it will not try to get the current row.
    #         ## This prevents errors when trying to get the current row of an item that is not selected.
    #         ## This sets the text of the input field to the text of the selected item
    #         ## This sets the text of the input field to the current row of the selected item
            
    #         # selected_items = self.myList.currentRow()## This gets the current row of the selected item in the list widget
    #         # self.myItems.setText(self.myList.currentItem().text())## This sets the text of the input field to the text of the selected item            
    #         # self.myItems.setText(str(selected_items))## This sets the text of the input field to the current row of the selected item
    
    def delete_it(self):
        selected_items = self.myList.currentRow()
        # This line sets the current row of the list widget to the selected item.
        # Check if there are any selected items before trying to remove them
        # If there are no selected items, it will not try to remove anything.
        if selected_items:
            self.myList.takeItem(selected_items)## This removes the item from the list widget
        # takeItem() removes the item from the list widget and returns it
        # row(item) returns the row number of the item in the list widget
        # This is used to remove the item from the list widget.
        
    ## Clear All Items from List
    def clear_it(self):
        self.myList.clear()## This clears the list widget, removing all items from it.
        # self.myItems.clear()## This clears the input field, removing any text from it.
        # self.myTree.clear()## This clears the tree widget, removing all items from it.
        self.myItems.clear()
# This function clears the list and the input field.
    ## Retranslate UI   

    def retranslateUi(self, myListWindow):
        _translate = QtCore.QCoreApplication.translate
        myListWindow.setWindowTitle(_translate("myListWindow", "TO DO LIST"))
        self.Add_Item.setText(_translate("myListWindow", "Add Item to List"))
        self.Delete_Item.setText(_translate("myListWindow", "Delete Item from List"))
        self.Clear_Item.setText(_translate("myListWindow", "Clear All Items"))
       
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_myListWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())