
'''
for lesson 4 of alan_d_moore's Signals and Slots course
This module contains the main application logic for the Signals and Slots course.
i am using the .py file generated by pyuic5 from the .ui file created in Qt Designer
copied the myLogin.py file to Alan_D_Moore/M_4_Signals_Slots/myLogin.py

from Alan_D_Moore.M_4_Signals_Slots.myLogin import Ui_LoginForm
from PyQt5 import QtCore, QtGui, QtWidgets
class Ui_LoginForm(object):
    def setupUi(self, LoginForm):

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_LoginForm()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
'''
import sys
from PyQt5 import QtWidgets as qtw
from PyQt5 import QtCore as qtc
from PyQt5 import QtGui as qtg
from myLogin import Ui_LoginForm  as LoginForm # Import the generated UI class from your .ui file

class Ui_LoginForm(qtw.QMainWindow, LoginForm):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)  # Initialize the parent class with positional and keyword arguments
        self.setupUi(self)
        # Set up the UI components
        self.setWindowTitle('Login Form')  # Set the window title
        self.setGeometry(100, 100, 400, 300)
        # Initialize the parent class with multiple inheritance
        # This allows us to use both QMainWindow and the generated Ui_LoginForm class
        # Call the setupUi method to set up the UI components
        # This is where we set up the UI components defined in the .ui file
    
        self.loginButton.clicked.connect(lambda: self.handle_login())  # Connect the login button to the handle_login method
        # self.loginButton.clicked.connect(self.handle_login)
        self.cancelButton.clicked.connect(self.close_dialog)
        # self.checkBox = qtw.QCheckBox(f'CheckBox {1}', self)
        self.checkBox.setChecked(False)
        self.checkBox.setGeometry(qtc.QRect(130, 190, 185, 20))  # Set the geometry of the checkbox
        self.checkBox.clicked.connect(self.on_checkbox_clicked)
        self.checkBox.stateChanged.connect(self.on_checkbox_clicked)  # Connect the checkbox state change to a method
        self.checkBox.setTristate()
        self.checkBox.setCheckState(qtc.Qt.Unchecked)
        self.username_label.setGeometry(qtc.QRect(70, 100, 58, 16))  # Set the geometry of the username label

        # Use lambda to pass checkbox and label to the handler
        self.checkBox.stateChanged.connect(
            lambda state, cb=self.checkBox, lbl=self.username_label: self.update_label(cb, lbl, state)
        )


    def update_label(self, checkbox, label, state):
        if state == qtc.Qt.Checked:
            self.username_label.setText(f'{checkbox.text()} is Checked')
        elif state == qtc.Qt.Unchecked:
            self.username_label.setText(f'{checkbox.text()} is Unchecked')
        elif state == qtc.Qt.PartiallyChecked:
            self.username_label.setText(f'{checkbox.text()} is Partially Checked')
        print(f'{checkbox.text()} ‚Üí state: {state}, isChecked(): {checkbox.isChecked()}')

    def on_checkbox_clicked(self):
        if self.checkBox.isChecked():
            print("Checkbox checked")
            # You can add more logic here if needed when the checkbox is clicked
        else:
            print("Checkbox unchecked")
    def close_dialog(self):
        print("Login cancelled")
        qtw.QMessageBox.warning(self, "Login Cancelled", "You have cancelled the login process.")
        self.close()
    def on_checkbox_clicked(self):
        if self.checkBox.isChecked():
            print("Checkbox checked")
            # You can add more logic here if needed when the checkbox is clicked
        else:
            print("Checkbox unchecked")
    # def accept_dialog(self):
    # def handle_login(self):
    #     print("Login button clicked")
    #     # Here you can handle the login logic, e.g., validate credentials
    #     # For demonstration, we'll just show a message box
    #     # and clear the username field
    #     username = self.username_lineEdit.text()
    #     password = self.password_line_edit.text()
    #     if username and password:
    #         qtw.QMessageBox.information(self, "Login", f"Welcome {username}!")
    #     else:
    #         qtw.QMessageBox.warning(self, "Login", "Please enter both username and password.")
    #     self.username_lineEdit.clear()
    def handle_login(self):
        print("Login accepted")
        username = self.username_lineEdit.text()
        password = self.password_line_edit.text()
        legalese = self.checkBox.isChecked()
        print(f"Username: {username}, Password: {password}, Legalese: {legalese}")
        qtw.QMessageBox.information(self, "Login Info", f"Username: {username}\nPassword: {password}\nLegalese: {legalese}")
    # def reject_dialog(self):
    #     print("Login cancelled")
    #     qtw.QMessageBox.warning(self, "Login Cancelled", "You have cancelled the login process.")
    #     self.close()

# if __name__ == "__main__":
#     import sys
#     app = qtw.QApplication(sys.argv)
#     MainWindow = qtw.QMainWindow()
#     ui = Ui_LoginForm()
#     ui.setupUi(MainWindow)
#     MainWindow.show()
#     sys.exit(app.exec_())

if __name__ == "__main__":
    app = qtw.QApplication(sys.argv)
    # MainWindow = qtw.QMainWindow()
    w = Ui_LoginForm()
    # ui.setupUi(MainWindow)
    w.show()
    sys.exit(app.exec_())

'''
```python
you're comparing two similar programs, but one works and the other doesn‚Äôt open the window as expected. Here's the key difference and why the first program doesn't work even though the second does.

üîç The Core Problem in the First Program
MainWindow = qtw.QMainWindow()
ui = Ui_LoginForm()
ui.setupUi(MainWindow)
MainWindow.show()
You're instantiating Ui_LoginForm as a ui object, then applying setupUi() to a generic QMainWindow instance (MainWindow). But you‚Äôve already subclassed QMainWindow with Ui_LoginForm, so you‚Äôre skipping the actual Ui_LoginForm class with all your logic.

‚úÖ This is bypassing your class logic like button signals and slots (handle_login, close_dialog, etc.).

‚úÖ The Working Version Gets It Right
w = Ui_LoginForm(windowTitle='My Window')
w.show()
This creates an instance of your subclassed Ui_LoginForm, which:

Inherits from QMainWindow
Automatically calls __init__()
Sets up all UI and signal-slot connections
Runs your custom methods like accept_dialog() and reject_dialog()
üõ† Fixing the First Program
To make your first version work, change the main block to use your actual class instance:

‚ùå Bad (skips logic):

MainWindow = qtw.QMainWindow()
ui = Ui_LoginForm()
ui.setupUi(MainWindow)
MainWindow.show()
‚úÖ Correct:

if __name__ == "__main__":
    app = qtw.QApplication(sys.argv)
    window = Ui_LoginForm()
    window.show()
    sys.exit(app.exec_())
That‚Äôs it ‚Äî now it will show the window and execute all your defined methods, slots, and logic properly.

‚úÖ Summary
Code Pattern	What Happens
ui.setupUi(MainWindow)	Applies layout only; skips your logic
window = Ui_LoginForm()	Applies layout and your logic
window.show()```
'''